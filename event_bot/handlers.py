# handlers.py
import sqlite3
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from event_bot.utils import TEMP_EVENT_DATA
from event_bot.message_deletion import schedule_message_deletion


logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
async def list_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        with sqlite3.connect('events.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute('SELECT id, title, date, time, description, photo_id FROM events')
            events = c.fetchall()

        if not events:
            message = await update.message.reply_text('–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç')
            await schedule_message_deletion(context, update.message.chat_id,
                                           [update.message.message_id, message.message_id])
            return

        response = '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n\n'
        for event in events:
            event_id, title, date, time, description, photo_id = event
            photo_status = 'üì∑ –§–æ—Ç–æ –µ—Å—Ç—å' if photo_id else 'üì∑ –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            time_str = f'–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time}\n' if time else ''
            response += f'üÜî ID: {event_id}\nüìÖ {title}\n–î–∞—Ç–∞: {date}\n{time_str}–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{photo_status}\n\n'

        message = await update.message.reply_text(response)
        await schedule_message_deletion(context, update.message.chat_id,
                                       [update.message.message_id, message.message_id])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
        message = await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π')
        await schedule_message_deletion(context, update.message.chat_id,
                                       [update.message.message_id, message.message_id])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        args = ' '.join(context.args).split(';')
        if len(args) != 4:
            message = await update.message.reply_text('–§–æ—Ä–º–∞—Ç: /add_event –ù–∞–∑–≤–∞–Ω–∏–µ;–î–î.–ú–ú.–ì–ì–ì–ì;–ß–ß:–ú–ú;–û–ø–∏—Å–∞–Ω–∏–µ')
            context.user_data['temp_message_ids'] = [update.message.message_id, message.message_id]
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                context.user_data.get('temp_message_ids', [])
            )
            return

        title, date_str, time_str, description = args

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            datetime.strptime(date_str, '%d.%m.%Y')
        except ValueError:
            message = await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            context.user_data['temp_message_ids'] = [update.message.message_id, message.message_id]
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.strptime(time_str, '%H:%M')
        except ValueError:
            message = await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú')
            context.user_data['temp_message_ids'] = [update.message.message_id, message.message_id]
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                context.user_data.get('temp_message_ids', [])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        user_id = update.effective_user.id
        TEMP_EVENT_DATA[user_id] = {
            'title': title.strip(),
            'date': date_str,
            'time': time_str,
            'description': description.strip()
        }
        message = await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç–∞
        context.user_data['temp_message_ids'] = [update.message.message_id, message.message_id]
        context.user_data['awaiting_photo'] = True

        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ awaiting_photo —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        message = await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
        context.user_data['temp_message_ids'] = [update.message.message_id, message.message_id]
        await schedule_message_deletion(
            context,
            update.message.chat_id,
            context.user_data.get('temp_message_ids', [])
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç (ID —Å–æ–±—ã—Ç–∏—è)
        if not context.args:
            message = await update.message.reply_text('–§–æ—Ä–º–∞—Ç: /delete_event <ID —Å–æ–±—ã—Ç–∏—è>')
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                [update.message.message_id, message.message_id]
            )
            return

        event_id = context.args[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID —á–∏—Å–ª–æ–º
        try:
            event_id = int(event_id)
        except ValueError:
            message = await update.message.reply_text('ID —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                [update.message.message_id, message.message_id]
            )
            return

        with sqlite3.connect('events.db', timeout=10) as conn:
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
            c.execute('SELECT title FROM events WHERE id = ?', (event_id,))
            event = c.fetchone()

            if not event:
                message = await update.message.reply_text(f'–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
                await schedule_message_deletion(
                    context,
                    update.message.chat_id,
                    [update.message.message_id, message.message_id]
                )
                return

            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã events
            c.execute('DELETE FROM events WHERE id = ?', (event_id,))
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sent_notifications
            c.execute('DELETE FROM sent_notifications WHERE event_id = ?', (event_id,))
            conn.commit()

        message = await update.message.reply_text(f'–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        await schedule_message_deletion(
            context,
            update.message.chat_id,
            [update.message.message_id, message.message_id]
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        message = await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
        await schedule_message_deletion(
            context,
            update.message.chat_id,
            [update.message.message_id, message.message_id]
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
    user_id = update.message.from_user.id
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, "
        f"awaiting_photo={context.user_data.get('awaiting_photo', False)}, "
        f"has_photo={bool(update.message.photo)}"
    )

    if not context.user_data.get('awaiting_photo', False):
        logger.info(f"–§–æ—Ç–æ –æ—Ç user_id={user_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ awaiting_photo=False")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.photo:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message}")
            message = await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç).')

            context.user_data['temp_message_ids'].append(update.message.message_id)
            context.user_data['temp_message_ids'].append(message.message_id)

            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É)
        photo = update.message.photo[-1]
        photo_id = photo.file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id={photo_id} –æ—Ç user_id={user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        event_data = TEMP_EVENT_DATA.get(user_id)
        if not event_data:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è user_id={user_id}")
            message = await update.message.reply_text('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

            context.user_data['temp_message_ids'].append(update.message.message_id)
            context.user_data['temp_message_ids'].append(message.message_id)
            context.user_data['awaiting_photo'] = False

            await schedule_message_deletion(
                context,
                update.message.chat_id,
                context.user_data.get('temp_message_ids', [])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
        with sqlite3.connect('events.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute('INSERT INTO events (title, date, time, description, photo_id) VALUES (?, ?, ?, ?, ?)',
                      (event_data['title'], event_data['date'], event_data['time'], event_data['description'],
                       photo_id))
            conn.commit()

        message = await update.message.reply_text('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')

        context.user_data['temp_message_ids'].append(update.message.message_id)
        context.user_data['temp_message_ids'].append(message.message_id)

        logger.info(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_data['title']} —Å photo_id={photo_id} –¥–ª—è user_id={user_id}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
        await schedule_message_deletion(
            context,
            update.message.chat_id,
            context.user_data.get('temp_message_ids', [])
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        TEMP_EVENT_DATA.pop(user_id, None)
        context.user_data['awaiting_photo'] = False
        context.user_data['temp_message_ids'] = []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {e}")
        message = await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.')

        context.user_data['temp_message_ids'].append(update.message.message_id)
        context.user_data['temp_message_ids'].append(message.message_id)

        await schedule_message_deletion(
            context,
            update.message.chat_id,
            context.user_data.get('temp_message_ids', [])
        )
        context.user_data['awaiting_photo'] = False
        TEMP_EVENT_DATA.pop(user_id, None)
        context.user_data['temp_message_ids'] = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
    user_id = update.message.from_user.id
    if context.user_data.get('awaiting_photo', False):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            event_data = TEMP_EVENT_DATA.get(user_id)
            if not event_data:
                message = await update.message.reply_text('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                context.user_data['temp_message_ids'].append(update.message.message_id)
                context.user_data['temp_message_ids'].append(message.message_id)
                context.user_data['awaiting_photo'] = False

                await schedule_message_deletion(
                    context,
                    update.message.chat_id,
                    context.user_data.get('temp_message_ids', [])
                )
                context.user_data['temp_message_ids'] = []
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É (–±–µ–∑ —Ñ–æ—Ç–æ)
            with sqlite3.connect('events.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute('INSERT INTO events (title, date, time, description, photo_id) VALUES (?, ?, ?, ?, ?)',
                          (event_data['title'], event_data['date'], event_data['time'], event_data['description'],
                           None))
                conn.commit()

            message = await update.message.reply_text('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!')

            context.user_data['temp_message_ids'].append(update.message.message_id)
            context.user_data['temp_message_ids'].append(message.message_id)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                context.user_data.get('temp_message_ids', [])
            )
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            TEMP_EVENT_DATA.pop(user_id, None)
            context.user_data['awaiting_photo'] = False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ: {e}")
            message = await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.')

            context.user_data['temp_message_ids'].append(update.message.message_id)
            context.user_data['temp_message_ids'].append(message.message_id)
            context.user_data['awaiting_photo'] = False

            TEMP_EVENT_DATA.pop(user_id, None)
            await schedule_message_deletion(
                context,
                update.message.chat_id,
                context.user_data.get('temp_message_ids', [])
            )
            context.user_data['temp_message_ids'] = []
    else:
        message = await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_event!')
        await schedule_message_deletion(
            context,
            update.message.chat_id,
            [update.message.message_id, message.message_id]
        )

async def error_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
