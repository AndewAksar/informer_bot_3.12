# statistics_bot/bot.py
import sqlite3
import pytz
import logging
from datetime import datetime, time
from telegram.ext import ContextTypes
from telegram import Update

from config import GROUP_CHAT_ID


logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_message_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_id = update.message.chat_id
        if chat_id != GROUP_CHAT_ID:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ chat_id={chat_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GROUP_CHAT_ID={GROUP_CHAT_ID}")
            return

        user_id = update.message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ forward_origin
        is_repost = hasattr(update.message, 'forward_origin') and update.message.forward_origin is not None

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}, is_repost={is_repost}, "
                    f"forward_origin={getattr(update.message, 'forward_origin', None)}")

        with sqlite3.connect('events.db', timeout=10) as conn:
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            c.execute('SELECT message_count, repost_count FROM user_messages WHERE user_id = ?', (user_id,))
            result = c.fetchone()
            if result:
                message_count, repost_count = result
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                message_count += 1
                repost_count += 1 if is_repost else 0
                c.execute('UPDATE user_messages SET message_count = ?, repost_count = ? WHERE user_id = ?',
                          (message_count, repost_count, user_id))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                c.execute('INSERT INTO user_messages (user_id, message_count, repost_count) VALUES (?, ?, ?)',
                          (user_id, 1, 1 if is_repost else 0))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def send_daily_statistics(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        ekb_tz = pytz.timezone('Asia/Yekaterinburg')
        current_date = datetime.now(ekb_tz).strftime('%d.%m.%Y')

        with sqlite3.connect('events.db', timeout=10) as conn:
            c = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤
            c.execute('SELECT user_id, message_count, repost_count FROM user_messages WHERE message_count > 0')
            statistics = c.fetchall()

            if not statistics:
                message = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {current_date}:\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.'
            else:
                message = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {current_date}:\n\n'
                for user_id, msg_count, repost_count in statistics:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await context.bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
                        username = user.user.username or user.user.first_name
                        message += f'üë§ {username}: {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –Ω–∏—Ö: {repost_count})\n'
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                        message += f'üë§ ID {user_id}: {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –Ω–∏—Ö: {repost_count})\n'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∞—Ç
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {current_date}")

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_messages
            c.execute('DELETE FROM user_messages')
            conn.commit()
            logger.info("–î–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

